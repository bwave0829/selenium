Mavenの設定方法


０．条件
＜１＞条件
EclipseにMaven用のプラグインがインストール済みであること
　m2e : Eclipse用Maven統合

＜２＞Eclipseでの設定
ウィンドウ／設定／Maven／ユーザー設定

・ユーザー設定（存在していない）
　C:\Users\kodama\.m2\settings.xml

・ローカル・リポジトリー
　C:\Users\kodama\.m2\repository


参照：https://qiita.com/tarosa0001/items/e5667cfa857529900216


１．プロジェクトの作成
Maven用のプロジェクトを作成する

（１）ファイル／新規／Mavenプロジェクト

（２）シンプルなプロジェクト作成をチェックして、「次へ」を押す

（３）必須項目入力
　・グループID：Selenium2
　・アーティファクトID（これがプロジェクト名）:Selenium2

「完了」を押す




２．pom.xmlファイルの編集
（１）初期ファイルの確認
#===
<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>Selenium2</groupId>
  <artifactId>Selenium2</artifactId>
  <version>0.0.1-SNAPSHOT</version>
</project>
#===

（２）コンパイル用のプラグイン設定の追加
以下の設定を、 <version>0.0.1-SNAPSHOT</version>の後ろに追加する。
#===
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
    </properties>

    <build>
        <plugins>
            <plugin>
	        <!-- http://maven.apache.org/plugins/index.html -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.7.0</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
#===


（３）JUnitのライブラリーである「junit」の追加
以下の設定を、 <version>0.0.1-SNAPSHOT</version>の後ろに追加する。
#===
<!-- https://mvnrepository.com/artifact/junit/junit -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.12</version>
    <scope>test</scope>
</dependency>
#===


（４）yamlのライブラリーである「snakeyaml」の追加
以下の設定を、 <version>0.0.1-SNAPSHOT</version>の後ろに追加する。
#===
<dependencies>
<dependency>
    <groupId>org.yaml</groupId>
    <artifactId>snakeyaml</artifactId>
    <version>1.19</version>
</dependency>
</dependencies>
#===



（５）selenium用のライブラリーである「selenium-java」の追加
以下の設定を、タグ「<dependencies>」の中に追加
#===
<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-java</artifactId>
    <version>3.9.1</version>
</dependency>


（６）selenium用のライブラリーである「selenium-chrome-driver」の追加
以下の設定を、タグ「<dependencies>」の中に追加
#===
<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-chrome-driver -->
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-chrome-driver</artifactId>
    <version>3.9.1</version>
</dependency>
#===

（７）selenium用のライブラリーである「selenium-firefox-driver」の追加
以下の設定を、タグ「<dependencies>」の中に追加
#===
<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-firefox-driver -->
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-firefox-driver</artifactId>
    <version>3.9.1</version>
</dependency>
#===

（８）selenium用のライブラリーである「selenium-ie-driver」の追加
以下の設定を、タグ「<dependencies>」の中に追加
#===
<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-ie-driver -->
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-ie-driver</artifactId>
    <version>3.9.1</version>
</dependency>
#===



●検索方法
＜１＞プラグイン
http://maven.apache.org/plugins/index.html

＜２＞ライブラリ／ドライバーなど
https://mvnrepository.com/artifact/org.seleniumhq.selenium




３．サンプルファイルの登録
src/main/javaに、「HelloWorld.java」を追加する

パッケージ「src/main/java」を右クリックして、「新規／クラス」を選択する

以下を入力して、「完了」を押す
　・パッケージ  ：hello.main
　・名前        ：HelloWorld

HelloWorld.java
#===
package hello.main;

public class HelloWorld {
    /**
     * main処理
     * 標準出力にHello Worldを表示する。
     * @param args コマンド引数
     */
    public static void main(String[] args) {
        System.out.println("Hello Maven World!");
    }
}
#===


４．インストール
（Mavenの「インストール」を実行する
　※インストール　：　コンパイル　＆　Jarファイルのローカルリポジトリへの配備

（１）インストール　実行
プロジェクト「Selenium2」を右クリックして、「実行／Maven インストール」を選択する
ログの最後の方に「BUILD SUCCESS」と表示される

#===
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Selenium2 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ Selenium2 ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ Selenium2 ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 1 source file to D:\MyDoc\work\EclipseWorkSpace\Selenium2\target\classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ Selenium2 ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ Selenium2 ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ Selenium2 ---
[INFO] 
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ Selenium2 ---
[INFO] Building jar: D:\MyDoc\work\EclipseWorkSpace\Selenium2\target\Selenium2-0.0.1-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ Selenium2 ---
[INFO] Installing D:\MyDoc\work\EclipseWorkSpace\Selenium2\target\Selenium2-0.0.1-SNAPSHOT.jar to C:\Users\kodama\.m2\repository\Selenium2\Selenium2\0.0.1-SNAPSHOT\Selenium2-0.0.1-SNAPSHOT.jar
[INFO] Installing D:\MyDoc\work\EclipseWorkSpace\Selenium2\pom.xml to C:\Users\kodama\.m2\repository\Selenium2\Selenium2\0.0.1-SNAPSHOT\Selenium2-0.0.1-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.360 s
[INFO] Finished at: 2018-02-26T00:21:03+09:00
[INFO] Final Memory: 21M/761M
[INFO] ------------------------------------------------------------------------

#===



（２）確認
プロジェクト内に「target」というフォルダが現れ、そこにビルドしたjarファイルが格納される

実際のディレクトリ：D:\MyDoc\work\EclipseWorkSpace\Selenium2\target



５．動作確認
（１）バージョン確認
C:\Users\kodama>java -version
java version "1.8.0_152"
Java(TM) SE Runtime Environment (build 1.8.0_152-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.152-b16, mixed mode)

（２）実行
d:
cd D:\MyDoc\work\EclipseWorkSpace\Selenium2\target


D:\MyDoc\work\EclipseWorkSpace\Selenium2\target>java -classpath Selenium2-0.0.1-SNAPSHOT.jar hello.main.HelloWorld
Hello Maven World!



６．Selenium用プログラムの作成
